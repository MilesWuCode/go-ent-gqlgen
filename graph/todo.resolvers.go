package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.22

import (
	"context"
	"fmt"
	"go-ent-gqlgen/ent"
	"go-ent-gqlgen/graph/generated"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input ent.CreateTodoInput) (*ent.Todo, error) {
	// panic(fmt.Errorf("not implemented: CreateTodo - createTodo"))

	// 新增一筆資料
	client := ent.FromContext(ctx)
	return client.Todo.Create().SetInput(input).Save(ctx)
}

// UpdateTodo is the resolver for the updateTodo field.
func (r *mutationResolver) UpdateTodo(ctx context.Context, id int, input ent.UpdateTodoInput) (*ent.Todo, error) {
	// panic(fmt.Errorf("not implemented: UpdateTodo - updateTodo"))

	// 更新一筆資料
	return r.client.Todo.UpdateOneID(id).SetInput(input).Save(ctx)
}

// DeleteTodo is the resolver for the deleteTodo field.
func (r *mutationResolver) DeleteTodo(ctx context.Context, id int) (bool, error) {
	// panic(fmt.Errorf("not implemented: DeleteTodo - deleteTodo"))

	// 刪除一筆資料
	if err := r.client.Todo.DeleteOneID(id).Exec(ctx); err != nil {
		return false, err
	}

	return true, nil
}

// Todo is the resolver for the todo field.
func (r *queryResolver) Todo(ctx context.Context, id int) (*ent.Todo, error) {
	// panic(fmt.Errorf("not implemented: Todo - todo"))

	// 用id查一筆資料
	return r.client.Todo.Get(ctx, id)
}

// Company is the resolver for the company field.
func (r *todoResolver) Company(ctx context.Context, obj *ent.Todo) (string, error) {
	// panic(fmt.Errorf("not implemented: Company - company"))
	return fmt.Sprintf("%v: %v", obj.ID, obj.Text), nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
